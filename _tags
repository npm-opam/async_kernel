<**/*.ml{,i}>: warn(-40), no_alias_deps
<**/*>: thread
# This prevents the implicit addition of -ppx options by ocamlfind
<**/*>: predicate(custom_ppx)
<src/*.ml>: for-pack(Async_kernel)
<src/*.ml{,i}>: pp(ppx-jane -dump-ast -inline-test-drop -bench-drop -inline-test-lib fake_for_drop)
# OASIS_START
# DO NOT EDIT (digest: c7d5d3d2795f4b6febe7549c16d03d56)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library async_kernel
"src/async_kernel.cmxs": use_async_kernel
"src/async_condition.cmx": for-pack(Async_kernel)
"src/async_gc.cmx": for-pack(Async_kernel)
"src/async_quickcheck.cmx": for-pack(Async_kernel)
"src/async_quickcheck_intf.cmx": for-pack(Async_kernel)
"src/async_stream.cmx": for-pack(Async_kernel)
"src/clock_intf.cmx": for-pack(Async_kernel)
"src/clock_ns.cmx": for-pack(Async_kernel)
"src/config.cmx": for-pack(Async_kernel)
"src/debug.cmx": for-pack(Async_kernel)
"src/deferred.cmx": for-pack(Async_kernel)
"src/deferred0.cmx": for-pack(Async_kernel)
"src/deferred1.cmx": for-pack(Async_kernel)
"src/deferred_array.cmx": for-pack(Async_kernel)
"src/deferred_list.cmx": for-pack(Async_kernel)
"src/deferred_map.cmx": for-pack(Async_kernel)
"src/deferred_memo.cmx": for-pack(Async_kernel)
"src/deferred_option.cmx": for-pack(Async_kernel)
"src/deferred_or_error.cmx": for-pack(Async_kernel)
"src/deferred_queue.cmx": for-pack(Async_kernel)
"src/deferred_result.cmx": for-pack(Async_kernel)
"src/deferred_sequence.cmx": for-pack(Async_kernel)
"src/deferred_sequence_unit_tests.cmx": for-pack(Async_kernel)
"src/deferred_std.cmx": for-pack(Async_kernel)
"src/deferred_unit_tests.cmx": for-pack(Async_kernel)
"src/execution_context.cmx": for-pack(Async_kernel)
"src/external_job.cmx": for-pack(Async_kernel)
"src/handler.cmx": for-pack(Async_kernel)
"src/import.cmx": for-pack(Async_kernel)
"src/ivar.cmx": for-pack(Async_kernel)
"src/ivar0.cmx": for-pack(Async_kernel)
"src/job.cmx": for-pack(Async_kernel)
"src/job_pool.cmx": for-pack(Async_kernel)
"src/job_queue.cmx": for-pack(Async_kernel)
"src/lazy_deferred.cmx": for-pack(Async_kernel)
"src/monad_sequence.cmx": for-pack(Async_kernel)
"src/monad_sequence_unit_tests.cmx": for-pack(Async_kernel)
"src/monitor.cmx": for-pack(Async_kernel)
"src/monitor0.cmx": for-pack(Async_kernel)
"src/monitor_unit_tests.cmx": for-pack(Async_kernel)
"src/pipe.cmx": for-pack(Async_kernel)
"src/priority.cmx": for-pack(Async_kernel)
"src/scheduler.cmx": for-pack(Async_kernel)
"src/scheduler0.cmx": for-pack(Async_kernel)
"src/scheduler1.cmx": for-pack(Async_kernel)
"src/std.cmx": for-pack(Async_kernel)
"src/tail.cmx": for-pack(Async_kernel)
"src/test.cmx": for-pack(Async_kernel)
"src/throttle.cmx": for-pack(Async_kernel)
"src/throttle_debug.cmx": for-pack(Async_kernel)
"src/throttle_unit_tests.cmx": for-pack(Async_kernel)
"src/time_ns.cmx": for-pack(Async_kernel)
"src/time_source.cmx": for-pack(Async_kernel)
"src/time_source0.cmx": for-pack(Async_kernel)
"src/time_source_intf.cmx": for-pack(Async_kernel)
"src/timing_wheel_ns.cmx": for-pack(Async_kernel)
"src/types.cmx": for-pack(Async_kernel)
<src/*.ml{,i,y}>: package(bin_prot)
<src/*.ml{,i,y}>: package(core_kernel)
<src/*.ml{,i,y}>: package(fieldslib)
<src/*.ml{,i,y}>: package(ppx_assert.runtime-lib)
<src/*.ml{,i,y}>: package(ppx_bench.runtime-lib)
<src/*.ml{,i,y}>: package(ppx_expect.collector)
<src/*.ml{,i,y}>: package(ppx_inline_test.runtime-lib)
<src/*.ml{,i,y}>: package(sexplib)
<src/*.ml{,i,y}>: package(typerep)
<src/*.ml{,i,y}>: package(variantslib)
# OASIS_STOP
